{
  "name": "filter-where",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "1.0.1",
  "description": "Filter an array using any combination of scalars, object queries, functions or regular expressions.",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/filter-where.git"
  },
  "license": "MIT",
  "main": "./lib/filter-where.js",
  "keywords": [
    "where",
    "array",
    "filter",
    "custom"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "tape test/*.js",
    "docs": "jsdoc2md2 -t jsdoc2md/README.md lib/*.js > README.md; echo"
  },
  "devDependencies": {
    "tape": "^4.4.0"
  },
  "dependencies": {
    "test-value": "^1.0.1"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/filter-where.svg)](https://www.npmjs.org/package/filter-where)\n[![npm module downloads](http://img.shields.io/npm/dt/filter-where.svg)](https://www.npmjs.org/package/filter-where)\n[![Build Status](https://travis-ci.org/75lb/filter-where.svg?branch=master)](https://travis-ci.org/75lb/filter-where)\n[![Dependency Status](https://david-dm.org/75lb/filter-where.svg)](https://david-dm.org/75lb/filter-where)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n<a name=\"module_filter-where\"></a>\n## filter-where\nFilter an array using any combination of scalars, object queries, functions or regular expressions.\n\n\n<a name=\"exp_module_filter-where--where\"></a>\n### where(query) ⇒ `function` ⏏\n**Kind**: Exported function  \n\n| Param | Type                       | Description         |\n| ----- | -------------------------- | ------------------- |\n| query | `any` &#124; `Array.<any>` | one or more queries |\n\n\n**Example**\nSay you have a recordset:\n```js\n> data = [\n    { name: 'Dana', age: 30 },\n    { name: 'Yana', age: 20 },\n    { name: 'Zhana', age: 10 }\n]\n```\n\nYou can return records with properties matching an exact value:\n```js\n> data.filter(where({ age: 10 }))\n[ { name: 'Zhana', age: 10 } ]\n```\n\nor where NOT the value (prefix the property name with `!`)\n```js\n> data.filter(where({ '!age': 10 }))\n[ { name: 'Dana', age: 30 }, { name: 'Yana', age: 20 } ]\n```\n\nmatch using a function:\n```js\n> function over10(age){ return age > 10; }\n> data.filter(where({ age: over10 }))\n[ { name: 'Dana', age: 30 }, { name: 'Yana', age: 20 } ]\n```\n\nmatch using a regular expression\n```js\n> data.filter(where({ name: /ana/ }))\n[ { name: 'Dana', age: 30 },\n  { name: 'Yana', age: 20 },\n  { name: 'Zhana', age: 10 } ]\n```\n\nYou can query to any arbitrary depth. So with deeper data, like this:\n```js\n> deepData = [\n    { name: 'Dana', favourite: { colour: 'light red' } },\n    { name: 'Yana', favourite: { colour: 'dark red' } },\n    { name: 'Zhana', favourite: { colour: [ 'white', 'red' ] } }\n]\n```\n\nget records with `favourite.colour` values matching `/red/`\n```js\n> deepData.filter(where({ favourite: { colour: /red/ } }))\n[ { name: 'Dana', favourite: { colour: 'light red' } },\n  { name: 'Yana', favourite: { colour: 'dark red' } } ]\n```\n\nif the value you're looking for _maybe_ part of an array, prefix the property name with `+`. Now Zhana is included:\n```js\n> deepData.filter(where({ favourite: { '+colour': /red/ } }))\n[ { name: 'Dana', favourite: { colour: 'light red' } },\n  { name: 'Yana', favourite: { colour: 'dark red' } },\n  { name: 'Zhana', favourite: { colour: [ 'white', 'red' ] } } ]\n```\n\nyou can combine any of the above by supplying an array of queries. Records will be returned if _any_ of the queries match:\n```js\n> var nameBeginsWithY = { name: /^Y/ }\n> var faveColourIncludesWhite = { favourite: { '+colour': 'white' } }\n\n> deepData.filter(where([ nameBeginsWithY, faveColourIncludesWhite ]))\n[ { name: 'Yana', favourite: { colour: 'dark red' } },\n  { name: 'Zhana', favourite: { colour: [ 'white', 'red' ] } } ]\n```\n\n\n\n\n* * *\n\n&copy; 2016 Lloyd Brookes <75pound@gmail.com>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/filter-where/issues"
  },
  "_id": "filter-where@1.0.1",
  "dist": {
    "shasum": "601592dbf37ff96be638c104c6fa4a12d78ec0d5"
  },
  "_from": "filter-where@^1.0.1",
  "_resolved": "https://registry.npmjs.org/filter-where/-/filter-where-1.0.1.tgz"
}
