{
  "name": "electron-builder",
  "description": "Complete solution to build ready for distribution and 'auto update' Electron App installers",
  "main": "index.js",
  "scripts": {
    "compile": "tsconfig -i 2 && ts-babel",
    "lint": "eslint ./lib cli.js index.js && tslint src/*",
    "pretest": "npm run compile && npm run lint",
    "test": "result=\"$(tape index.spec.js ./lib/*.spec.js ./lib/**/*.spec.js)\"; echo \"$result\" | tap-spec; echo \"$result\" | tnyan; ava",
    "test-win": "npm run pretest && ava",
    "test-build": "result=\"$(tape cli.spec.js)\"; echo \"$result\" | tap-spec; echo \"$result\" | tnyan;",
    "declaration": "dts-generator --name electron-builder --out out/electron-builder.d.ts",
    "semantic-release": "npm run declaration && semantic-release pre && npm publish && semantic-release post"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/loopline-systems/electron-builder.git"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "keywords": [
    "electron",
    "builder",
    "build",
    "installer",
    "install",
    "packager",
    "pack",
    "nsis",
    "appdmg",
    "app",
    "dmg",
    "msi",
    "exe",
    "setup",
    "Windows",
    "OS X",
    "Mac"
  ],
  "bin": {
    "electron-builder": "cli.js",
    "install-app-deps": "./out/install-app-deps.js",
    "build": "./out/build-cli.js"
  },
  "author": {
    "name": "Stefan Judis"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/loopline-systems/electron-builder/issues"
  },
  "homepage": "https://github.com/loopline-systems/electron-builder",
  "dependencies": {
    "bluebird": "^3.3.1",
    "command-line-args": "^2.1.6",
    "electron-packager-tf": "^5.2.1-beta.2",
    "electron-winstaller-temp-fork": "^0.1.0",
    "fs-extra": "^0.26.5",
    "gm": "^1.21.1",
    "hosted-git-info": "^2.1.4",
    "lodash.template": "^4.2.1",
    "meow": "^3.7.0",
    "mime": "^1.3.4",
    "progress": "^1.1.8",
    "progress-stream": "^1.2.0",
    "read-package-json": "^2.0.3",
    "rimraf": "^2.5.1",
    "source-map-support": "^0.4.0",
    "tmp": "0.0.28",
    "appdmg": "^0.3.6"
  },
  "optionalDependencies": {
    "appdmg": "^0.3.6"
  },
  "devDependencies": {
    "ava-tf": "^0.12.1",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-es2015-parameters": "^6.5.0",
    "tsd-generator": "^2.0.2",
    "eslint": "^2.2.0",
    "path-sort": "^0.1.0",
    "plist": "^1.2.0",
    "proxyquire": "^1.7.4",
    "rimraf": "^2.5.2",
    "should": "^8.2.2",
    "tap-nyan": "0.0.2",
    "tap-spec": "^4.1.1",
    "tape": "^4.4.0",
    "ts-babel": "^0.4.3",
    "tsconfig-glob": "^0.4.1",
    "tslint": "^3.5.0",
    "typescript": "^1.8.2",
    "semantic-release": "^4.3.5"
  },
  "babel": {
    "plugins": [
      "transform-es2015-parameters",
      "array-includes"
    ]
  },
  "ava": {
    "verbose": true
  },
  "typings": "./out/electron-builder.d.ts",
  "version": "2.8.3",
  "readme": "Complete solution to build ready for distribution and \"auto update\" installers of your app for OS X, Windows and Linux.\n\n* [Native application dependencies](http://electron.atom.io/docs/latest/tutorial/using-native-node-modules/) compilation (only if two-package.json project layout used).\n* [Auto Update](#auto-update) ready application packaging.\n* [Code Signing](#code-signing) on a CI server or development machine.\n* [Build version management](#build-version-management).\n* [Publishing artifacts to GitHub Releases](./docs/deployment.md).\n\n[electron-packager](https://github.com/maxogden/electron-packager),\n[appdmg](https://github.com/LinusU/node-appdmg) and\n[windows-installer](https://github.com/electronjs/windows-installer) are used under the hood.\n\nReal project example — [onshape-desktop-shell](https://github.com/develar/onshape-desktop-shell).\n\n# Configuration\n## In short\n1. Ensure that required fields are specified in the application `package.json`:\n\n  Standard `name`, `description`, `version` and `author`.\n\n  Custom `build` field must be specified:\n  ```json\n  \"build\": {\n    \"app-bundle-id\": \"your.id\",\n    \"app-category-type\": \"your.app.category.type\",\n    \"iconUrl\": \"(windows only) A URL to an ICO file to use as the application icon, see details below\"\n  }\n  ```\n  This object will be used as a source of [electron-packager](https://www.npmjs.com/package/electron-packager#packageropts-callback) options. You can specify any other options here.\n\n2. Create directory `build` in the root of the project and put your `background.png` (OS X DMG background), `icon.icns` (OS X app icon) and `icon.ico` (Windows app icon).\n  Linux icon set will be generated automatically on the fly from the OS X `icns` file.\n\n3. Add [scripts](https://docs.npmjs.com/cli/run-script) to the development `package.json`:\n    ```json\n    \"scripts\": {\n      \"postinstall\": \"install-app-deps\",\n      \"pack\": \"build\",\n      \"dist\": \"build\"\n    }\n    ```\n    And then you can run `npm run pack` or `npm run dist` (to package in a distributable format (e.g. DMG, windows installer, NuGet package)).\n\n4. Install [required system packages](./docs/multi-platform-build.md).\n\n## iconUrl\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n* If you don't plan to build windows installer, you can omit it.\n* If your project repository is public on GitHub, it will be `https://raw.githubusercontent.com/${info.user}/${info.project}/master/build/icon.ico` by default.\n\n## Distributable Format Configuration\nIn the development `package.json` custom `build` field can be specified to customize distributable format:\n```json\n\"build\": {\n  \"osx\": {\n    \"title\": \"computed name from app package.js, you can overwrite\",\n    \"icon\": \"build/icon.icns\",\n    \"icon-size\": 80,\n    \"background\": \"build/background.png\",\n    \"contents\": [\n      {\n        \"x\": 410,\n        \"y\": 220,\n        \"type\": \"link\",\n        \"path\": \"/Applications\"\n      },\n      {\n        \"x\": 130,\n        \"y\": 220,\n        \"type\": \"file\",\n        \"path\": \"computed path to artifact, do not specify it - will be overwritten\"\n      }\n    ]\n  },\n  \"win\": \"see https://github.com/electronjs/windows-installer#usage\"\n}\n```\n\nAs you can see, you need to customize OS X options only if you want to provide custom `x, y`.\nDon't customize paths to background and icon, — just follow conventions (if you don't want to use `build` as directory of resources — please create issue to ask ability to customize it).\n\nSee [OS X options](https://www.npmjs.com/package/appdmg#json-specification) and [Windows options](https://github.com/electronjs/windows-installer#usage).\n\n# Auto Update\n`electron-builder` produces all required artifacts:\n\n* `.dmg`: OS X installer, required for OS X user to initial install.\n* `-mac.zip`: required for Squirrel.Mac.\n* `.exe` and `-x64.exe`: Windows installer, required for Windows user to initial install. Please note — [your app must handle Squirrel.Windows events](https://github.com/electronjs/windows-installer#handling-squirrel-events). See [real example](https://github.com/develar/onshape-desktop-shell/blob/master/src/WinSquirrelStartupEventHandler.ts).\n* `.full-nupkg`: required for Squirrel.Windows.\n* `-amd64.deb` and `-i386.deb`: Linux Debian package. Please note — by default the most effective [xz](https://en.wikipedia.org/wiki/Xz) compression format used.\n\nYou need to deploy somewhere [releases/downloads server](https://github.com/GitbookIO/nuts).\n\nIn general, there is a possibility to setup it as a service for all (it is boring to setup own if cloud service is possible).\nMay be it will be soon (feel free to file an issue to track progress).\nIt is safe since you should sign your app in any case (so, even if server will be compromised, users will not be affected because OS X will just block unsigned/unidentified app).\n\n# Code signing\nOS X and Windows code singing is supported.\nOn a development machine set environment variable `CSC_NAME` to your identity (recommended). Or pass `--sign` parameter.\n```\nexport CSC_NAME=\"Developer ID Application: Your Name (code)\"\n```\n\n## Travis, AppVeyor and other CI servers\nTo sign app on build server:\n\n1. [Export](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW7) certificate.\n [Strong password](http://security.stackexchange.com/a/54773) must be used. Consider to not use special characters (for bash) because “*values are not escaped when your builds are executed*”.\n2. Upload `*.p12` file (e.g. on [Google Drive](http://www.syncwithtech.org/p/direct-download-link-generator.html)).\n3. Set ([Travis](https://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables) or [AppVeyor](https://ci.appveyor.com/tools/encrypt)) `CSC_LINK` and `CSC_KEY_PASSWORD` environment variables:\n```\ntravis encrypt \"CSC_LINK='https://drive.google.com/uc?export=download&id=***'\" --add\ntravis encrypt 'CSC_KEY_PASSWORD=beAwareAboutBashEscaping!!!' --add\n```\n\n# Build Version Management\n`CFBundleVersion` (OS X) and `FileVersion` (Windows) will be set automatically to `version`.`build_number` on CI server (Travis, AppVeyor and CircleCI supported).\n\n# CLI usage\nExecute `node_modules/.bin/build --help` to get actual CLI usage guide.\nIn most cases you should not explicitly pass flags, so, we don't want to promote it here ([npm lifecycle](https://docs.npmjs.com/misc/scripts#current-lifecycle-event) is supported and script name is taken in account).\nWant more — please file issue.\n\n# Programmatic usage\nSee `node_modules/electron-builder/out/electron-builder.d.ts`. [Typings](https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages) is supported.\n\n# Old API (< 2.8)\nOld API is deprecated, but not dropped. You can use it as before. Please note — new API by default produces Squirrel.Windows installer, set `target` to build NSIS:\n ```\n build --target=nsis\n ```",
  "readmeFilename": "README.md",
  "_id": "electron-builder@2.8.3",
  "dist": {
    "shasum": "d89e51dd43480ef96f05b77656ed60043c603e24"
  },
  "_from": "electron-builder@",
  "_resolved": "https://registry.npmjs.org/electron-builder/-/electron-builder-2.8.3.tgz"
}
